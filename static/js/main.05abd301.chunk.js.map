{"version":3,"sources":["components/movie/Movie.module.css","components/moovy/Moovy.module.css","components/buttonBar/ButtonBar.module.css","components/displaySelector/DisplaySelector.module.css","core/appContext.ts","hooks/useWindowSize.ts","components/buttonBar/ButtonBar.tsx","components/displaySelector/DisplaySelector.tsx","services/constants.ts","services/utils.ts","core/MovieClass.ts","services/movieSearch.ts","components/moovy/Moovy.tsx","components/movie/Movie.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","DefaultContext","moviesFavourite","moviesWatchLater","AppContext","React","createContext","useWindowSize","isClient","window","getSize","desktop","innerWidth","mobile","width","height","innerHeight","useState","windowSize","setWindowSize","useEffect","handleResize","a","addEventListener","fetchData","removeEventListener","ButtonBar","movie","context","useContext","some","x","id","isFavourite","setIsFavourite","isWatchLater","setIsWatchLater","className","s","root","src","alt","onClick","filter","DisplaySelector","display","onDisplayClick","type","URL","MAIN","fetchUrl","url","fetch","response","json","MovieClass","data","title","posterPath","this","poster_path","movieSearch","apiKey","searchText","movies","results","map","moviesDefault","Moovy","setSearchText","setMovies","loading","setLoading","onSearchClick","moviesToDisplay","label","value","onChange","event","target","length","key","Movie","imageUrl","undefined","poster","buttonBar","buttonBarMobile","App","setDisplay","Provider","input","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.05abd301.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Movie_root__KFgdv\",\"poster\":\"Movie_poster__3h7UJ\",\"buttonBar\":\"Movie_buttonBar__N5SLX\",\"buttonBarMobile\":\"Movie_buttonBarMobile__2DD5q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Moovy_root__3uWAo\",\"label\":\"Moovy_label__1x9HL\",\"movies\":\"Moovy_movies__fFRty\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"ButtonBar_root__2mcj5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"DisplaySelector_root__2ei-8\"};","import React from \"react\";\r\nimport { MovieClass } from \"./MovieClass\";\r\n\r\nexport type AppContextType = {\r\n  moviesFavourite: MovieClass[];\r\n  moviesWatchLater: MovieClass[];\r\n};\r\n\r\nexport const DefaultContext: AppContextType = {\r\n  moviesFavourite: [],\r\n  moviesWatchLater: [],\r\n};\r\n\r\nexport const AppContext = React.createContext(DefaultContext);\r\n","import { useState, useEffect } from \"react\";\r\n\r\nconst mobileMaxWidth = 414;\r\n\r\nconst useWindowSize = () => {\r\n  const isClient = typeof window === \"object\";\r\n\r\n  function getSize() {\r\n    const desktop = isClient ? window.innerWidth > mobileMaxWidth : true;\r\n    const mobile = !desktop;\r\n\r\n    return {\r\n      width: isClient ? window.innerWidth : 300, // 300 min\r\n      height: isClient ? window.innerHeight : 800, // 800 min\r\n      desktop,\r\n      mobile,\r\n    };\r\n  }\r\n\r\n  const [windowSize, setWindowSize] = useState(getSize);\r\n\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setWindowSize(getSize());\r\n    }\r\n\r\n    const fetchData = async () => {\r\n      if (!isClient) {\r\n        return false;\r\n      }\r\n\r\n      window.addEventListener(\"resize\", handleResize);\r\n    };\r\n    fetchData();\r\n\r\n    return () => window.removeEventListener(\"resize\", handleResize); // on unmount\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []); // Empty array ensures that effect is only run on mount and unmount\r\n\r\n  return windowSize;\r\n};\r\n\r\nexport default useWindowSize;\r\n","import React, { useContext, useState } from \"react\";\nimport { AppContext, AppContextType } from \"core/appContext\";\nimport { MovieClass } from \"core/MovieClass\";\nimport s from \"./ButtonBar.module.css\";\n\ntype Props = {\n  movie: MovieClass;\n};\n\n// ----------\n// COMPONENT:\nconst ButtonBar = ({ movie }: Props) => {\n  // CONTEXT:\n  const context: AppContextType = useContext(AppContext);\n\n  // FUNCTIONS:\n  const getIsFavourite = () =>\n    context.moviesFavourite.some((x: MovieClass) => x.id === movie.id);\n  const getIsWatchLater = () =>\n    context.moviesWatchLater.some((x: MovieClass) => x.id === movie.id);\n\n  // STATE:\n  const [isFavourite, setIsFavourite] = useState(getIsFavourite());\n  const [isWatchLater, setIsWatchLater] = useState(getIsWatchLater());\n\n  const onFavouriteClick = () => {\n    context.moviesFavourite = isFavourite\n      ? context.moviesFavourite.filter((x) => x.id !== movie.id)\n      : [...context.moviesFavourite, movie];\n\n    setIsFavourite(!isFavourite);\n  };\n  const onWatchLaterClick = () => {\n    context.moviesWatchLater = isWatchLater\n      ? context.moviesWatchLater.filter((x) => x.id !== movie.id)\n      : [...context.moviesWatchLater, movie];\n\n    setIsWatchLater(!isWatchLater);\n  };\n\n  // RENDER:\n  return (\n    <div className={s.root}>\n      <img\n        src={isFavourite ? \"./star.svg\" : \"./star-gray.svg\"}\n        alt=\"\"\n        onClick={onFavouriteClick}\n      />\n\n      <img\n        src={isWatchLater ? \"./clock.svg\" : \"./clock-gray.svg\"}\n        alt=\"\"\n        onClick={onWatchLaterClick}\n      />\n    </div>\n  );\n};\n\nexport default ButtonBar;\n","import React from \"react\";\nimport { DisplayType } from \"core/types\";\nimport s from \"./DisplaySelector.module.css\";\n\ntype Props = {\n  display: DisplayType;\n  onDisplayClick: (input: DisplayType) => void;\n};\n\n// ----------\n// COMPONENT:\nconst DisplaySelector = ({ display, onDisplayClick }: Props) => {\n  return (\n    <div className={s.root}>\n      <div className=\"appButtons\">\n        <button type=\"button\">\n          <img\n            src={display === \"search\" ? \"./search.png\" : \"./search-gray.png\"}\n            alt=\"\"\n            onClick={() => onDisplayClick(\"search\")}\n          />\n        </button>\n\n        <button type=\"button\">\n          <img\n            src={display === \"favourites\" ? \"./star.svg\" : \"./star-gray.svg\"}\n            alt=\"\"\n            onClick={() => onDisplayClick(\"favourites\")}\n          />\n        </button>\n\n        <button type=\"button\">\n          <img\n            src={display === \"watchLater\" ? \"./clock.svg\" : \"./clock-gray.svg\"}\n            alt=\"\"\n            onClick={() => onDisplayClick(\"watchLater\")}\n          />\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default DisplaySelector;\n","const MAIN = \"https://api.themoviedb.org/3/\";\r\n\r\nexport const URL = {\r\n  SEARCH: MAIN + \"search/movie\",\r\n};\r\n\r\nexport const imagePath = \"http://image.tmdb.org/t/p/w185\";\r\n","export const fetchUrl = async (url: string) => {\r\n  const response = await fetch(url);\r\n  return await response.json();\r\n};\r\n","/*\r\nEXAMPLE:\r\npopularity\t48.058\r\nvote_count\t351\r\nvideo\tfalse\r\nposter_path\t\"/oyG9TL7FcRP4EZ9Vid6uKzwdndz.jpg\"\r\nid\t696374\r\nadult\tfalse\r\nbackdrop_path\t\"/w2uGvCpMtvRqZg6waC1hvLyZoJa.jpg\"\r\noriginal_language\t\"en\"\r\noriginal_title\t\"Gabriel's Inferno\"\r\ngenre_ids\t[…]\r\ntitle\t\"Gabriel's Inferno\"\r\nvote_average\t8.9\r\noverview\t\"An intriguing and sinful exploration of seduction, forbidden love, and redemption, Gabriel's Inferno is a captivating and wildly passionate tale of one man's escape from his own personal hell as he tries to earn the impossible--forgiveness and love.\"\r\nrelease_date\t\"2020-05-29\"\r\n*/\r\n\r\nexport class MovieClass {\r\n  id: number;\r\n  title: string;\r\n  posterPath: string;\r\n\r\n  constructor(data: any) {\r\n    this.id = data.id;\r\n    this.title = data.title;\r\n    this.posterPath = data.poster_path;\r\n  }\r\n}\r\n","import { URL } from \"./constants\";\r\nimport { fetchUrl } from \"./utils\";\r\nimport { MovieClass } from \"core/MovieClass\";\r\n\r\nexport const movieSearch = async (\r\n  apiKey: string,\r\n  searchText: string\r\n): Promise<MovieClass[]> => {\r\n  const data = await fetchUrl(\r\n    URL.SEARCH + `?query=${searchText}&api_key=${apiKey}`\r\n  );\r\n\r\n  const movies = data.results.map((movie: object) => new MovieClass(movie));\r\n\r\n  return movies;\r\n};\r\n","import React, { useContext, useState } from \"react\";\nimport { AppContext, AppContextType } from \"core/appContext\";\nimport { useWindowSize } from \"hooks\";\nimport { DisplayType } from \"core/types\";\nimport { MovieClass } from \"core/MovieClass\";\nimport { movieSearch } from \"services/movieSearch\";\nimport { Movie } from \"components\";\nimport s from \"./Moovy.module.css\";\n\nconst moviesDefault: MovieClass[] = [];\n\ntype Props = {\n  display: DisplayType;\n};\n\n// ----------\n// COMPONENT:\nconst Moovy = ({ display }: Props) => {\n  // CONTEXT:\n  const context: AppContextType = useContext(AppContext);\n  const { moviesFavourite, moviesWatchLater } = context;\n\n  // CUSTOM HOOKS:\n  const { desktop, mobile } = useWindowSize();\n\n  // STATE:\n  // const [apiKey, setApiKey] = useState(\"d4628d3b003cc1fc6a008c7c53bdae46\");\n  const apiKey = \"d4628d3b003cc1fc6a008c7c53bdae46\";\n  const [searchText, setSearchText] = useState(\"Pippi\");\n  const [movies, setMovies] = useState(moviesDefault);\n  const [loading, setLoading] = useState(false);\n\n  // FUNCTIONS:\n  // const onApiKeyChange = (event: any) => {\n  //   setApiKey(event.target.value);\n  // };\n\n  const onSearchTextChange = (event: any) => {\n    setSearchText(event.target.value);\n  };\n\n  const onSearchClick = async () => {\n    if (!apiKey) {\n      return;\n    }\n\n    setLoading(true);\n\n    setMovies(await movieSearch(apiKey, searchText));\n    setLoading(false);\n  };\n\n  // CONSTANTS:\n  let moviesToDisplay = [];\n  if (display === \"favourites\") {\n    moviesToDisplay = moviesFavourite;\n  } else if (display === \"watchLater\") {\n    moviesToDisplay = moviesWatchLater;\n  } else {\n    moviesToDisplay = movies;\n  }\n\n  // RENDER:\n  return (\n    <div className={s.root}>\n      {display === \"favourites\" && <h2>Favourites</h2>}\n      {display === \"watchLater\" && <h2>Watch later</h2>}\n\n      {display === \"search\" && (\n        <>\n          {/* <div className=\"flexRow\">\n            <div className={\"label \" + s.label}>Your api key:</div>\n            <input\n              type=\"text\"\n              className=\"textBox\"\n              value={apiKey}\n              onChange={onApiKeyChange}\n            />\n          </div> */}\n\n          <div className=\"flexRow\">\n            <div className={\"label \" + s.label}>Text:</div>\n            <input\n              type=\"text\"\n              className=\"textBox\"\n              value={searchText}\n              onChange={onSearchTextChange}\n            />\n            {desktop && <button onClick={onSearchClick}>Search</button>}\n          </div>\n\n          {mobile && (\n            <div className=\"flexRowRight\">\n              <button onClick={onSearchClick}>Search</button>\n            </div>\n          )}\n        </>\n      )}\n\n      {loading && <div>Mooooooooo...</div>}\n\n      {moviesToDisplay && moviesToDisplay.length > 0 && (\n        <div className={s.movies}>\n          {moviesToDisplay.map(movie => (\n            <Movie key={movie.id} movie={movie} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Moovy;\n","import React from \"react\";\nimport { useWindowSize } from \"hooks\";\nimport { imagePath } from \"services/constants\";\nimport { MovieClass } from \"core/MovieClass\";\nimport { ButtonBar } from \"components\";\nimport s from \"./Movie.module.css\";\n\ntype Props = {\n  movie: MovieClass;\n};\n\n// ----------\n// COMPONENT:\nconst Movie = ({ movie }: Props) => {\n  // CUSTOM HOOKS:\n  const { desktop } = useWindowSize();\n\n  // CONSTANTS:\n  const imageUrl = movie.posterPath ? imagePath + movie.posterPath : undefined;\n\n  // RENDER:\n  return (\n    <div className={s.root}>\n      <img className={s.poster} alt=\"\" src={imageUrl} />\n\n      <div>{movie.title}</div>\n\n      <div className={desktop ? s.buttonBar : s.buttonBarMobile}>\n        <ButtonBar movie={movie} />\n      </div>\n    </div>\n  );\n};\n\nexport default Movie;\n","import React, { useState } from \"react\";\nimport { AppContext, DefaultContext } from \"core/appContext\";\nimport { useWindowSize } from \"hooks\";\nimport { DisplayType } from \"core/types\";\nimport { DisplaySelector, Moovy } from \"components\";\nimport \"./App.css\";\n\nconst displayTypeDefault: DisplayType = \"search\";\n\nfunction App() {\n  // CUSTOM HOOKS:\n  const { desktop } = useWindowSize();\n\n  // STATE:\n  const [display, setDisplay] = useState(displayTypeDefault);\n\n  // FUNCTIONS:\n  const onDisplayClick = (input: DisplayType) => {\n    setDisplay(input);\n  };\n\n  // RENDER:\n  return (\n    <AppContext.Provider value={DefaultContext}>\n      <div className=\"app\">\n        <header className=\"flexRowStretch\">\n          <h1>Moovy</h1>\n\n          <DisplaySelector display={display} onDisplayClick={onDisplayClick} />\n\n          {desktop && <img src=\"./moo-fo.png\" alt=\"moo-fo\" className=\"mooFo\" />}\n        </header>\n\n        <Moovy display={display} />\n      </div>\n    </AppContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}